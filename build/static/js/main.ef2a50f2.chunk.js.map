{"version":3,"sources":["components/campfire.gif","components/Torch_Gif.gif","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","useState","item","setItem","list","setList","src","campfire","type","placeholder","value","onChange","e","target","className","onClick","newItem","id","Math","random","slice","newList","push","addItem","disabled","length","map","class","key","updatedList","filter","deleteItem","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,sC,yFCA3CD,EAAOC,QAAU,IAA0B,uC,4HCgE5BC,EA7DK,WAAO,IAAD,EACAC,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,OAEAF,mBAAS,IAFT,mBAEjBG,EAFiB,KAEXC,EAFW,KAqBxB,OACE,kBAAC,WAAD,KACI,yBAAKC,IAAKC,MACZ,0CACA,8CACA,6BACA,2BACEC,KAAK,OACLC,YAAY,sBACZC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAAQS,EAAEC,OAAOH,UAEpC,4BACEI,UAAU,uBACVC,QAAS,kBAhCC,WACd,IAAMC,EAAU,CACdC,GAAI,EAAIC,KAAKC,SACbT,MAAOR,EAAKkB,SAGRC,EAAO,YAAOjB,GACpBiB,EAAQC,KAAKN,GACbX,EAAQgB,GACRlB,EAAQ,IAuBWoB,IACfC,UAAWtB,EAAKuB,QAEhB,mCAEF,6BAlBF,IAkBS,6BACP,4BACGrB,EAAKsB,KAAI,SAACxB,GACT,OAEE,wBAAIyB,MAAM,UAAUC,IAAK1B,EAAKe,IAC3Bf,EAAKQ,MACN,4BACEI,UAAU,QACVC,QAAS,kBAlCJ,SAACE,GAClB,IACMY,EADO,YAAOzB,GACQ0B,QAAO,SAAC5B,GAAD,OAAUA,EAAKe,KAAOA,KAEzDZ,EAAQwB,GA8BmBE,CAAW7B,EAAKe,MAE/B,wCCvCDe,EAXH,WACV,OAEE,yBAAKlB,UAAU,OAEb,kBAAC,EAAD,QCGcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef2a50f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/campfire.07a97834.gif\";","module.exports = __webpack_public_path__ + \"static/media/Torch_Gif.88e1a5d6.gif\";","import React, { Fragment, useState } from \"react\";\r\nimport torchgif from \"./Torch_Gif.gif\";\r\nimport campfire from \"./campfire.gif\"\r\nexport const Todo = () => {\r\n  const [item, setItem] = useState(\"\");\r\n  const [list, setList] = useState([]);\r\n  const addItem = () => {\r\n    const newItem = {\r\n      id: 1 + Math.random(),\r\n      value: item.slice(),\r\n    };\r\n\r\n    const newList = [...list];\r\n    newList.push(newItem);\r\n    setList(newList);\r\n    setItem(\"\");\r\n  };\r\n\r\n  const deleteItem = (id) => {\r\n    const newList = [...list];\r\n    const updatedList = newList.filter((item) => item.id !== id);\r\n\r\n    setList(updatedList);\r\n  };\r\n  return (\r\n    <Fragment>\r\n        <img src={campfire}></img>\r\n      <h1>Quest List</h1>\r\n      <h3>Add a Quest...</h3>\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Typest thy Quest...\"\r\n        value={item}\r\n        onChange={(e) => setItem(e.target.value)}\r\n      />\r\n      <button\r\n        className=\"add-btn btn-floating\"\r\n        onClick={() => addItem()}\r\n        disabled={!item.length}\r\n      >\r\n        <i> + </i>\r\n      </button>\r\n      <br /> <br />\r\n      <ul>\r\n        {list.map((item) => {\r\n          return (\r\n              \r\n            <li class=\"thelist\" key={item.id}>\r\n              {item.value}\r\n              <button\r\n                className=\"float\"\r\n                onClick={() => deleteItem(item.id)}\r\n              >\r\n                <i>x</i>\r\n              </button>\r\n              \r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Todo;","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./components/Todo\";\n\nconst App = () => {\n  return (\n    \n    <div className=\"App\">\n      \n      <Todo />\n    </div>\n    \n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}